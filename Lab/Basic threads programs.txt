#Program using thread
import threading
import time
def display(x,s,name):
    for i in range(x):
        time.sleep(s)
        print(name,"=Thread Started ")
t=threading.Thread(target=display,args=(5,2,"Thread1"))
t.start()
t=threading.Thread(target=display,args=(5,1,"Thread2"))
t.start()
#Program using thread(using loop)
from threading import *
def mt():
    print("Child Thread")
    for i in range(11,20):
            print(i*2)
def disp():
   for i in range(10):
            print(i*2)
child=Thread(target=mt)
child.start()
disp()
#Program using thread (Common variable)

import threading
x = 0     # A shared value
COUNT = 10
def incr():
    global x
    for i in range(COUNT):
        x += 1
        print(x)
def decr():
    global x
    for i in range(COUNT):
        x -= 1
        print(x)
t1 = threading.Thread(target=incr)
t2 = threading.Thread(target=decr)
t1.start()
t2.start()
t1.join()
t2.join()
print(x)

Program using thread with lock
import threading
x = 0     # A shared value
COUNT = 100
lock = threading.Lock()

def incr():
    global x
    lock.acquire()
    print("thread locked for increment cur x=",x)
    for i in range(COUNT):
        x += 1
        print(x)
    lock.release()
    print("thread release from increment cur x=",x)


def decr():
   global x
   lock.acquire()
   print("thread locked for decrement cur x=", x)
   for i in range(COUNT):
      x -= 1
      print(x)
   lock.release()
   print("thread release from decrement cur x=", x)


t1 = threading.Thread(target=incr)
t2 = threading.Thread(target=decr)
t1.start()
t2.start()
t1.join()
t2.join()
#program using thread with lock(additional pgm)
from threading import *
import time
lock = Lock()
def watchtv(name):
    lock.acquire()
    print("Hi")
    time.sleep(1)
    print(name)
    lock.release()
name1="Raja"
name2="Bala"
vivo=Thread(target=watchtv,args=(name1,))
dell=Thread(target=watchtv,args=(name2,))
vivo.start()
dell.start()
#program using Rlock
from threading import *
import time
l=RLock()
def factorial(n):
   l.acquire()
   if n==0:
       result=1
   else:
       result=n*factorial(n-1)
   l.release()
   return result
def results(n):
   print("The Factorial of", n, "is:", factorial(n))
t1=Thread(target=results, args=(5,))
t2=Thread(target=results, args=(4,))
t1.start()
t2.start()
#program using semaphore
import threading
import time

done = threading.Semaphore(2)
item = None

def producer():
    global item
    print ("I'm the producer and I produce data.")
    print ("Producer is going to sleep.")
    time.sleep(3)
    item = "Hello"
    print ("Producer is alive. Signaling the consumer.")
    done.release()
def consumer():
    print ("I'm a consumer and I wait for data.")
    print ("Consumer is waiting.")
    done.acquire()
    print ("Consumer got", item)
t1 = threading.Thread(target=producer)
t2 = threading.Thread(target=consumer)
t1.start()
t2.start()
#program using semaphore
from threading import *
import threading
import time
s=Semaphore(4)
def wish(name,age):
  for i in range(3):
      s.acquire()
      print("Hi",name)
      time.sleep(2)
      s.release()
t1=Thread(target=wish, args=("Lux",15))
t2=Thread(target=wish, args=("Nitya",20))
t3=Thread(target=wish, args=("Shiva",16))
t4=Thread(target=wish, args=("Ajay",25))
t1.start()
t2.start()
t3.start()
t4.start()